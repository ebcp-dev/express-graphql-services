{"version":3,"sources":["../src/server.js"],"names":["app","PORT","process","env","endpoints","Promise","all","map","ep","allSchemas","use","bodyParser","json","schema","schemas","listen","console","log"],"mappings":";;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;2cANA;;;AAQA,IAAMA,MAAM,wBAAZ;;AAEA,IAAMC,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AAEA;AACA,IAAMG,YAAY,CAChB,+BADgB,EAEhB,+BAFgB,CAAlB;AAIA;AACA,wDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAG4BC,QAAQC,GAAR,CACvBF,UAAUG,GAAV,CAAc;AAAA,mBAAM,wCAAoBC,EAApB,CAAN;AAAA,WAAd,CADuB,CAH5B;;AAAA;AAGSC,oBAHT;;AAMG;AACAT,cAAIU,GAAJ,CACE,UADF,EAEEC,qBAAWC,IAAX,EAFF,EAGE,yCAAe,EAAEC,QAAQ,gCAAa,EAAEC,SAASL,UAAX,EAAb,CAAV,EAAf,CAHF;AAKA;AACAT,cAAIe,MAAJ,CAAWd,IAAX,EAAiB;AAAA,mBACfe,QAAQC,GAAR,CAAY,4CAA4ChB,IAAxD,CADe;AAAA,WAAjB;AAbH;AAAA;;AAAA;AAAA;AAAA;;AAiBGe,kBAAQC,GAAR,CAAY,6CAAZ;;AAjBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD","file":"server.js","sourcesContent":["// import polyfill for regeneratorRuntime in introspection.js\nimport 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { graphqlExpress } from 'apollo-server-express';\nimport { mergeSchemas } from 'graphql-tools';\nimport { getIntrospectSchema } from './introspection';\n\nconst app = express();\n\nconst PORT = process.env.PORT || 8081;\n\n//our graphql endpoints\nconst endpoints = [\n  'http://localhost:8082/graphql',\n  'http://localhost:8083/graphql'\n];\n//async function due to the async nature of grabbing all of our introspect schemas\n(async () => {\n  try {\n    //promise.all to grab all remote schemas at the same time, we do not care what order they come back but rather just when they finish\n    const allSchemas = await Promise.all(\n      endpoints.map(ep => getIntrospectSchema(ep))\n    );\n    //create function for /graphql endpoint and merge all the schemas\n    app.use(\n      '/graphql',\n      bodyParser.json(),\n      graphqlExpress({ schema: mergeSchemas({ schemas: allSchemas }) })\n    );\n    //start up a graphql endpoint for our main server\n    app.listen(PORT, () =>\n      console.log('Main API GraphQL API listening on port:' + PORT)\n    );\n  } catch (error) {\n    console.log('ERROR: Failed to grab introspection queries', error);\n  }\n})();\n"]}